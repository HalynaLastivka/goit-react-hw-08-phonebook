{"version":3,"file":"static/js/110.8e8aa94c.chunk.js","mappings":"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","sources":["redux/products.selectors.js","components/Error/ErrorMessage.jsx","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","components/FormPhone/FormPhone.jsx","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/icons/src/Delete.tsx","../node_modules/@chakra-ui/icon/src/create-icon.tsx","pages/ContactPage.jsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nconst selectContactStore = state => state.contacts;\n\nexport const selectContacts = createSelector(\n  selectContactStore,\n  contactsStore => contactsStore.contacts\n);\nexport const selectContactsIsLoading = createSelector(\n  selectContactStore,\n  contactsStore => contactsStore.isLoading\n);\nexport const selectContactsError = createSelector(\n  selectContactStore,\n  contactsStore => contactsStore.error\n);\nexport const selectContactsFilter = createSelector(\n  selectContactStore,\n  contactsStore => contactsStore.filter\n);\n","import React from 'react';\n\nconst ErrorMessage = ({ message }) => {\n  return <p className=\"error\">{message}</p>;\n};\n\nexport default ErrorMessage;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contactReducer';\nimport { selectContactsFilter } from 'redux/products.selectors';\nimport { FormControl, FormLabel, Input, Box } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const filter = useSelector(selectContactsFilter);\n  const dispatch = useDispatch();\n\n  const filterChange = e => {\n    const { value } = e.target;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n      <FormControl mb=\"10\">\n        <FormLabel textAlign=\"center\">Find contacts by name:</FormLabel>\n        <Input\n          onChange={filterChange}\n          value={filter}\n          type=\"text\"\n          name=\"filter\"\n          bg=\"white\"\n          border=\"1px\"\n          borderColor=\"gray\"\n          width={60}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contactReducer';\n\nimport { selectContacts } from 'redux/products.selectors';\nimport { nanoid } from 'nanoid';\nimport {\n  FormControl,\n  Button,\n  FormLabel,\n  Input,\n  Stack,\n  Box,\n} from '@chakra-ui/react';\n\nexport const FormPhone = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { name, value } }) => {\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleContact = (name, number) => {\n    if (contacts.some(contact => contact.name === name)) {\n      alert(`${name} is already in contacts!`);\n      return;\n    }\n    const newOneContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    dispatch(addContact(newOneContact));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    handleContact(name, number);\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Box\n      boxShadow=\"2xl\"\n      p=\"4\"\n      bg=\"#d4d4aa\"\n      rounded=\"md\"\n      maxWidth=\"400px\"\n      display=\"flex\"\n      alignItems=\"center\"\n    >\n      <form onSubmit={handleSubmit}>\n        <FormControl\n          as=\"fieldset\"\n          isRequired\n          maxWidth=\"300px\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          padding=\"10px\"\n          gap=\"5px\"\n          border=\"1px solid gray\"\n        >\n          <Stack spacing={4} direction=\"column\">\n            <Stack direction=\"row\" spacing={4}>\n              <FormLabel m=\"0\" width=\"20\">\n                Name:\n              </FormLabel>\n              <Input\n                id=\"unique-id\"\n                onChange={handleChange}\n                value={name}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                required\n                bg=\"white\"\n                border=\"1px\"\n                borderColor=\"gray\"\n                width={60}\n              />\n            </Stack>\n            <Stack direction=\"row\" spacing={4}>\n              <FormLabel m=\"0\" width=\"20\">\n                Number:\n              </FormLabel>\n              <Input\n                id=\"unique-id\"\n                onChange={handleChange}\n                value={number}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n                required\n                bg=\"white\"\n                border=\"1px\"\n                borderColor=\"gray\"\n                width={60}\n              />\n            </Stack>\n          </Stack>\n\n          <Button colorScheme=\"blackAlpha\" type=\"submit\">\n            Add contact\n          </Button>\n        </FormControl>\n      </form>\n    </Box>\n  );\n};\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const DeleteIcon = createIcon({\n  displayName: \"DeleteIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M19.452 7.5H4.547a.5.5 0 00-.5.545l1.287 14.136A2 2 0 007.326 24h9.347a2 2 0 001.992-1.819L19.95 8.045a.5.5 0 00-.129-.382.5.5 0 00-.369-.163zm-9.2 13a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zm5 0a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zM22 4h-4.75a.25.25 0 01-.25-.25V2.5A2.5 2.5 0 0014.5 0h-5A2.5 2.5 0 007 2.5v1.25a.25.25 0 01-.25.25H2a1 1 0 000 2h20a1 1 0 000-2zM9 3.75V2.5a.5.5 0 01.5-.5h5a.5.5 0 01.5.5v1.25a.25.25 0 01-.25.25h-5.5A.25.25 0 019 3.75z\" />\n    </g>\n  ),\n})\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { Children } from \"react\"\nimport { Icon, IconProps } from \"./icon\"\n\ninterface CreateIconOptions {\n  /**\n   * The icon `svg` viewBox\n   * @default \"0 0 24 24\"\n   */\n  viewBox?: string\n  /**\n   * The `svg` path or group element\n   * @type React.ReactElement | React.ReactElement[]\n   */\n  path?: React.ReactElement | React.ReactElement[]\n  /**\n   * If the `svg` has a single path, simply copy the path's `d` attribute\n   */\n  d?: string\n  /**\n   * The display name useful in the dev tools\n   */\n  displayName?: string\n  /**\n   * Default props automatically passed to the component; overwritable\n   */\n  defaultProps?: IconProps\n}\n\nexport function createIcon(options: CreateIconOptions) {\n  const {\n    viewBox = \"0 0 24 24\",\n    d: pathDefinition,\n    displayName,\n    defaultProps = {},\n  } = options\n  const path = Children.toArray(options.path)\n\n  const Comp = forwardRef<IconProps, \"svg\">((props, ref) => (\n    <Icon ref={ref} viewBox={viewBox} {...defaultProps} {...props}>\n      {path.length ? path : <path fill=\"currentColor\" d={pathDefinition} />}\n    </Icon>\n  ))\n\n  Comp.displayName = displayName\n\n  return Comp\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport image from '../img/main-bg.jpg';\nimport { deleteContact, fetchContacts } from 'redux/contactReducer';\nimport {\n  selectContacts,\n  selectContactsError,\n  selectContactsFilter,\n  selectContactsIsLoading,\n} from 'redux/products.selectors';\nimport Loader from 'components/Loader/Loader';\nimport ErrorMessage from 'components/Error/ErrorMessage';\nimport { Filter } from 'components/Filter/Filter';\nimport { FormPhone } from 'components/FormPhone/FormPhone';\nimport { Box, Grid, Text, Button } from '@chakra-ui/react';\nimport { DeleteIcon } from '@chakra-ui/icons';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectContactsFilter);\n  const error = useSelector(selectContactsError);\n  const isLoading = useSelector(selectContactsIsLoading);\n\n  const dispatch = useDispatch();\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const getFilteredContacts = () => {\n    if (!filter) {\n      return contacts;\n    }\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contFilter = getFilteredContacts();\n  // const contFilter = contacts;\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      gap=\"4\"\n      justifyContent=\"flex-start\"\n      flex=\"3\" // Розтягується на всю доступну ширину\n      border=\"2px\"\n      bgImage={image}\n      bgRepeat=\"no-repeat\"\n      bgPosition=\"top center\"\n      bgSize=\"cover\"\n    >\n      <Text textAlign=\"center\" fontWeight=\"800\" fontSize=\"32\" mt={4}>\n        Phonebook\n      </Text>\n      <FormPhone />\n\n      <Text textAlign=\"center\" fontWeight=\"600\" fontSize=\"24\">\n        Conatcts list\n      </Text>\n\n      <Filter />\n      {isLoading && <Loader />}\n      {error && <ErrorMessage message={error} />}\n      <Grid templateColumns=\"repeat(3, 1fr)\" gap={2} m=\"2\">\n        {Array.isArray(contFilter) &&\n          contFilter.map(contact => (\n            <Box\n              boxShadow=\"2xl\"\n              p=\"4\"\n              gap=\"2\"\n              bg=\"#a6c9a6\"\n              rounded=\"md\"\n              maxWidth=\"400px\"\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"space-between\"\n              key={contact.id}\n            >\n              <Text>\n                {contact.name}: {contact.number}\n              </Text>\n              <Button\n                onClick={() => handleDelete(contact.id)}\n                type=\"button\"\n                colorScheme=\"blackAlpha\"\n              >\n                <DeleteIcon w={5} h={5} />\n              </Button>\n            </Box>\n          ))}\n      </Grid>\n    </Box>\n    /* <ul>\n        {contFilter.map(contact => (\n          <li key={contact.id}>\n            {contact.name}: {contact.phone}\n            <button\n              onClick={() => handleDelete(contact.id)}\n              type=\"button\"\n              className={css.btndelete}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul> */\n  );\n};\n\nexport default ContactList;\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["selectContactStore","state","contacts","selectContacts","createSelector","contactsStore","selectContactsIsLoading","isLoading","selectContactsError","error","selectContactsFilter","filter","message","className","Filter","useSelector","dispatch","useDispatch","display","flexDirection","alignItems","mb","textAlign","I","onChange","e","value","target","setFilter","type","name","bg","border","borderColor","width","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","FormPhone","useState","setName","number","setNumber","handleChange","boxShadow","p","rounded","maxWidth","onSubmit","event","preventDefault","some","contact","alert","newOneContact","addContact","handleContact","as","isRequired","padding","gap","spacing","direction","m","pattern","required","colorScheme","props","forwardRef","templateAreas","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","div","__css","Grid","chakra","displayName","pathDefinition","d","defaultProps","path","toArray","Comp","createIcon","ref","Children","Icon","children","options","length","fill","DeleteIcon","useEffect","fetchContacts","contFilter","normalizedFilter","toLowerCase","includes","getFilteredContacts","justifyContent","flex","bgImage","image","bgRepeat","bgPosition","bgSize","fontWeight","fontSize","mt","Loader","Array","isArray","map","onClick","contactId","deleteContact","w","h","useStyleConfig","requiredIndicator","RequiredIndicator","jsxs","optionalIndicator","cx","field","useFormControlContext","passedProps","ownProps","_a","getLabelProps","label","omitThemingProps","FormLabel","useFormControlStyles","span","getRequiredIndicatorProps","createContext","errorMessage","FormControlStylesProvider","strict","FormControlProvider","useFormControlProvider","idProp","context","useMultiStyleConfig","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","labelId","useId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","forwardedRef","useCallback","node","mergeRefs","htmlFor","getErrorMessageProps","dataAttr","getRootProps","role","onFocus","onBlur","FormControl","helperText","useFormControlProps","ariaAttr","labelIds","readOnly","push","disabled","join","_b","_c","useFormControl","callAllHandlers","htmlSize","input","Input"],"sourceRoot":""}